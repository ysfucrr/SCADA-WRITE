const ModbusRTU = require("modbus-serial");

// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ AYARLAR â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
const NUM_DEVICES = 40;
const FLOATS_PER_DEVICE = 20;
const REGISTER_PER_FLOAT = 2;
const REGISTERS_PER_DEVICE = FLOATS_PER_DEVICE * REGISTER_PER_FLOAT;
const DEVICE_OFFSET = REGISTERS_PER_DEVICE;
const TOTAL_REGISTERS = 65536;
const IP_ADDRESS = "0.0.0.0";
const PORT = 8505;

// â”€â”€â”€â”€â”€â”€ TÃ¼m registerâ€™larÄ± tutan buffer (65536 Ã— 2 byte)
const holdingRegisters = Buffer.alloc(TOTAL_REGISTERS * 2);

// â”€â”€â”€â”€â”€â”€ Her analizÃ¶r iÃ§in kWh deÄŸerleri (slave ID'ye gÃ¶re baÅŸlangÄ±Ã§ deÄŸeri)
const kwhValues = Array(NUM_DEVICES + 1).fill(0).map((_, i) => (i > 0 ? i - 1 : 0.0));

// â”€â”€â”€â”€â”€â”€ Bit-level registerlar iÃ§in durumlar
let bitStates = { 3: false, 15: false };
const BIT_MASKS = { 3: 0x0008, 15: 0x8000 };

// â”€â”€â”€â”€â”€â”€ HELPER: 32â€‘bit floatâ€™Ä± iki registerâ€™a yaz (daha verimli)
function writeFloatToHoldingReg(addr, value) {
  holdingRegisters.writeFloatBE(value, addr * 2);
}

// â”€â”€â”€â”€â”€â”€ HELPER: 16â€‘bit unsignedâ€™Ä± tek registerâ€™a yaz
function writeUInt16ToHoldingReg(addr, value) {
  holdingRegisters.writeUInt16BE(value, addr * 2);
}

// â”€â”€â”€â”€â”€â”€ 1) Her dakikada bir kWh deÄŸerlerini artÄ±r
setInterval(() => {
  for (let slave = 1; slave <= NUM_DEVICES; slave++) {
    kwhValues[slave] += 1.0;
  }
  console.log("ðŸ”„ [Sim] TÃ¼m analizÃ¶rlerin kWh deÄŸerleri gÃ¼ncellendi.");
}, 60_000);

// â”€â”€â”€â”€â”€â”€ 2) Bit durumlarÄ±nÄ± periyodik olarak deÄŸiÅŸtir
setInterval(() => {
  bitStates[3] = !bitStates[3];
  bitStates[15] = !bitStates[15];
}, 60_000);

// â”€â”€â”€â”€â”€â”€ 3) Her saniye: tÃ¼m elektriksel registerâ€™larÄ± gÃ¼ncelle (optimize edilmiÅŸ)
setInterval(() => {
  let boolRegValue = 0x0000;
  if (bitStates[3]) boolRegValue |= BIT_MASKS[3];
  if (bitStates[15]) boolRegValue |= BIT_MASKS[15];

  for (let slave = 1; slave <= NUM_DEVICES; slave++) {
    const baseAddr = (slave - 1) * DEVICE_OFFSET;

    // Elektriksel deÄŸerleri rastgele oluÅŸtur ve yaz
    writeFloatToHoldingReg(baseAddr + 0, 220 + Math.random() * 2); // V1
    writeFloatToHoldingReg(baseAddr + 2, 220 + Math.random() * 2); // V2
    writeFloatToHoldingReg(baseAddr + 4, 220 + Math.random() * 2); // V3
    writeFloatToHoldingReg(baseAddr + 14, kwhValues[slave]);       // Toplam kWh
    writeFloatToHoldingReg(baseAddr + 16, Math.random() * 10);     // AnlÄ±k kW
    writeFloatToHoldingReg(baseAddr + 20, 50.1 + Math.random() * 0.4); // Frekans

    // 18 numaralÄ± register: sadece slaveâ€¯1â€‘2 iÃ§in bool deÄŸerleri
    if (slave === 1 || slave === 2) {
      writeUInt16ToHoldingReg(baseAddr + 18, boolRegValue);
    }
  }
}, 1_000);

// â”€â”€â”€â”€â”€â”€ VECTOR TABANLI MODBUS SUNUCUSU â”€â”€â”€â”€â”€â”€
const vector = {
  getHoldingRegister(addr, unitID, callback) {
    // [Ä°YÄ°LEÅžTÄ°RME] GerÃ§ekÃ§i bir yerel aÄŸ gecikmesi simÃ¼lasyonu (dÃ¼ÅŸÃ¼k tutuldu)
    const latency = 10 + Math.random() * 20; // 10-30ms arasÄ±, Ã§ok daha hÄ±zlÄ± yanÄ±t

    setTimeout(() => {
      if (unitID < 1 || unitID > NUM_DEVICES) {
        return callback({ modbusErrorCode: 0x02 }); // Illegal Data Address
      }
      
      const realAddr = (unitID - 1) * DEVICE_OFFSET + addr;
      if (realAddr < 0 || realAddr >= TOTAL_REGISTERS) {
        return callback({ modbusErrorCode: 0x02 }); // Illegal Data Address
      }

      const value = holdingRegisters.readUInt16BE(realAddr * 2);
      callback(null, value);
    }, latency);
  },
  // Desteklenmeyen fonksiyonlar iÃ§in hata dÃ¶ndÃ¼r
  getInputRegister: (_, __, cb) => cb({ modbusErrorCode: 0x01 }),
  getCoil: (_, __, cb) => cb({ modbusErrorCode: 0x01 }),
  getDiscreteInput: (_, __, cb) => cb({ modbusErrorCode: 0x01 }),
  setRegister(addr, value, unitID, callback) {
    if (unitID === 1 && addr === 1280) {
      console.log(
        `[Sim] Yazma isteÄŸi alÄ±ndÄ±: Slave ID=${unitID}, Adres=${addr}, DeÄŸer=${value} (int16)`
      );
      // Gelen deÄŸeri 16-bit integer olarak Buffer'a yaz
      const realAddr = (unitID - 1) * DEVICE_OFFSET + addr;
      if (realAddr < 0 || realAddr >= TOTAL_REGISTERS) {
        return callback({ modbusErrorCode: 0x02 }); // Illegal Data Address
      }
      holdingRegisters.writeInt16BE(value, realAddr * 2);
    }
    // DiÄŸer tÃ¼m yazma isteklerini ÅŸimdilik yok sayabiliriz veya loglayabiliriz.
    // BaÅŸarÄ±lÄ± yanÄ±t gÃ¶nder
    callback();
  },
};

// â”€â”€â”€â”€â”€â”€ MODBUS TCP SUNUCUSUNU BAÅžLAT â”€â”€â”€â”€â”€â”€
new ModbusRTU.ServerTCP(
  vector,
  { host: IP_ADDRESS, port: PORT, debug: false, unitID: null }, // debug=false daha az konsol Ã§Ä±ktÄ±sÄ± iÃ§in
  () =>
    console.log(`âœ… HÄ±zlÄ± Modbus SimÃ¼latÃ¶rÃ¼ dinlemede: ${IP_ADDRESS}:${PORT}`)
);
